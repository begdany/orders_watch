use axum::{                 // Из библиотеки Axum (Фреймворк для создания веб-приложений)
    Router,                 // Импортируем структуру Router (Применяется для определения структуры веб-приложения (маршрут -> функция))
    routing::get            // Импортируем функцию get из модуля routing (Применяется для обработки GET-запросов)
};
use std::net::SocketAddr;   // Импортируем структуру SocketAddr из модуля net стандартной библиотеки (Применяется для задания адреса и порта сервера)
use std::env;               // Импортируем модуль env из стандартной библиотеки (Применяется для настройки отображения сообщений логирования)

async fn hello_world() -> &'static str {    // Объявляем асинхронную функцию hello_world, которая передает ссылку на статическую строку
    log::info!("Получен GET-запрос к корневой странице (/), выводим (Hello, World!)");    // Логируем GET-запрос к корневой странице /
    "Hello, World!"
}

#[tokio::main]      // Макрос, предоставляемый библиотекой tokio, который позволяет сделать функцию main асинхронной
async fn main() {   // Объявляем асинхронную функции main
    
    // Для того, чтобы сообщения лога появлялись в консоли без ввода команды
    // (прим. для Power Shell: $env:RUST_LOG = "info"), осуществляем следующую проверку:
    if env::var("RUST_LOG").is_err() {      // Если переменная RUST_LOG не существует в окружении Rust
        env::set_var("RUST_LOG", "info");   // Устанавливаем ее значение в info
    }

    env_logger::init();                 // Инициализируем систему логирования env_logger

    log::info!("Запуск сервера...");    // Логируем запуск сервера

    let app = Router::new()             // Создаем новый экземпляр Router
        .route("/", get(hello_world));  // Добавляем маршрут "/", который обрабатывает GET-запросы и вызывает функцию hello_world

    let addr = SocketAddr::from(([127, 0, 0, 1], 3000));        // Задаем адрес и порт для сервера: http://127.0.0.1:3000
    log::info!("Сервер доступен по ссылке: http://{}", addr);   // Логируем ссылку на сервер

    match axum::Server::bind(&addr)     // Создаем новый экземпляр сервера с заданным ранее адресом и портом, обрабатывая результат выполнения serve
        .serve(app.into_make_service()) // Обрабатываем входящие запросы в соответствии с определенной ранее структурой в app
        .await                          // Ожидаем завершения операции
    {
        Ok(()) => (),                   // Сервер успешно запущен
        Err(e) => log::error!("Ошибка при инициализации сервера: {}", e), // Логируем ошибку инициализации сервера
    }
}