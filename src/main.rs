use axum::{                 // Из библиотеки Axum (Фреймворк для создания веб-приложений)
    Router,                 // Импортируем структуру Router (Применяется для определения структуры веб-приложения (маршрут -> функция))
    routing::get            // Импортируем функцию get из модуля routing (Применяется для обработки GET-запросов)
};
use std::net::SocketAddr;   // Импортируем структуру SocketAddr из модуля net стандартной библиотеки (Применяется для задания адреса и порта сервера)

async fn hello_world() -> &'static str {    // Объявляем асинхронную функцию hello_world, которая передает ссылку на статическую строку
    "Hello, World!"
}

#[tokio::main]      // Макрос, предоставляемый библиотекой tokio, который позволяет сделать функцию main асинхронной
async fn main() {   // Объявляем асинхронную функции main
    let app = Router::new()             // Создаем новый экземпляр Router
        .route("/", get(hello_world));  // Добавляем маршрут "/", который обрабатывает GET-запросы и вызывает функцию hello_world

    let addr = SocketAddr::from(([127, 0, 0, 1], 3000));    // Задаем адрес и порт для сервера: http://127.0.0.1:3000

    axum::Server::bind(&addr)           // Создаем новый экземпляр сервера с заданным ранее адресом и портом
        .serve(app.into_make_service()) // Обрабатываем входящие запросы в соответствии с определенной ранее структурой в app
        .await                          // Ожидание завершения операции
        .unwrap();                      // Неявная обработка ошибок
}